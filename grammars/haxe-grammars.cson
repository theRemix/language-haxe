'scopeName': 'source.haxe'
'name': 'Haxe'
'comment': 'Haxe Syntax: version 3.3.0'
'fileTypes': ['hx']
'firstLineMatch': '''(?x)
  # Hashbang
  ^\\#!.*(?:\\s|\\/)
    haxe
  (?:$|\\s)
  |
  # Modeline
  (?i:
    # Emacs
    -\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)
      haxe
    (?=[\\s;]|(?<![-*])-\\*-).*?-\\*-
    |
    # Vim
    (?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s*set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=
      haxe
    (?=\\s|:|$)
  )
'''
'foldingStartMarker': '(\\{\\s*(//.*)?$|^\\s*// \\{\\{\\{|#if)'
'foldingStopMarker': '^\\s*(\\}|// \\}\\}\\}$|#end)'
'patterns': [
  {
    'include': '#comments'
  }
  {
    'include': '#strings'
  }
  {
    'include': '#constants'
  }
  {
    'include': '#class-definition'
  }
  {
    'include': '#function-definition'
  }
  {
    'include': '#storage'
  }
  {
    'include': '#constructor'
  }
  {
    'include': '#keywords'
  }
  {
    'include': '#regex'
  }
  {
    'include': '#field-completions'
  }
  {
    'match': '#(if|else|elseif|end|error)\\b'
    'name': 'keyword.preprocessor.macro.haxe'
  }
  {
    'match': '\\b(trace|this|super|untyped)\\b'
    'name': 'support.function.haxe'
  }
  {
    'match': '\\b__(a|arguments__|construct__|dollar__new|js__|keys__|new__|s|typeof__)\\b'
    'name': 'support.constant.haxe'
  }
  {
    'match': '(\\$type|\\b(case|cast|catch|default|dynamic|do|else|for|get|if|in|as|new|set|switch|throw|try|while|return|break|continue|extern|dynamic|implements|inline|override|private|public|static|import|using|package|var)\\b)'
    'name': 'keyword.control.haxe'
  }
  {
    'match': '\\b(Bool|Float|String|Void|Dynamic|Int|UInt|T)\\b'
    'name': 'storage.type.haxe'
  }
  {
    'match': '\\b(null|true|false)\\b'
    'name': 'constant.language.haxe'
  }
  {
    'match': '\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f)?\\b'
    'name': 'constant.numeric.haxe'
  }
  {
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.haxe'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.haxe'
    'name': 'string.quoted.double.haxe'
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.haxe'
      }
    ]
  }
  {
    'begin': '\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.haxe'
    'end': '\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.haxe'
    'name': 'string.quoted.single.haxe'
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.haxe'
      }
    ]
  }
  {
    'begin': '/\\*'
    'captures':
      '0':
        'name': 'punctuation.definition.comment.haxe'
    'end': '\\*/'
    'name': 'comment.block.haxe'
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.comment.haxe'
    'match': '(//).*$\\n?'
    'name': 'comment.line.double-slash.haxe'
  }
  {
    'match': '\\b(instanceof|is|typeof)\\b'
    'name': 'keyword.operator.haxe'
  }
  {
    'match': '[-!%&*+=/?:]'
    'name': 'keyword.operator.symbolic.haxe'
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.preprocessor.haxe'
    'match': '^[ \\t]*(#)[a-zA-Z]+'
    'name': 'meta.preprocessor.haxe'
  }
  {
    'begin': '\\b(function)\\s+([a-zA-Z_]\\w*(?:\\w|>|<|,)*)\\s*(\\()'
    'captures':
      '1':
        'name': 'storage.type.function.haxe'
      '2':
        'name': 'entity.name.function.haxe'
      '3':
        'name': 'punctuation.definition.parameters.begin.haxe'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.parameters.end.haxe'
    'name': 'meta.function.haxe'
    'patterns': [
      {
        'match': '[^,)\\n]+'
        'name': 'variable.parameter.function.haxe'
      }
    ]
  }
  {
    'captures':
      '1':
        'name': 'storage.type.class.haxe'
      '2':
        'name': 'entity.name.type.class.haxe'
      '3':
        'name': 'storage.modifier.extends.haxe'
      '4':
        'name': 'entity.other.inherited-class.haxe'
    'match': '\\b(class|enum|interface)\\s+([a-zA-Z_](?:\\w|>|<|,)*)(?:\\s+(extends|implements)\\s+([a-zA-Z_](?:\\w|\\.)*)\\s*,?)*'
    'name': 'meta.class.haxe'
  }
  {
    'captures':
      '1':
        'name': 'storage.type.typedef.haxe'
      '2':
        'name': 'entity.name.type.class.haxe'
    'match': '\\b(typedef)\\s+([A-Z][a-zA-Z_]\\w*)\\s*='
    'name': 'meta.typedef.haxe'
  }
  {
    'match': '\\b(function)\\b'
    'name': 'keyword.function.haxe'
  }
]
'repository':
  'class-definition':
    'patterns': [
      {
        'captures':
          '2':
            'name': 'storage.type.class.haxe'
          '3':
            'name': 'storage.modifier.class.haxe'
          '4':
            'name': 'entity.name.type.class.haxe'
        'match': '(?x)\n                                (\\b(abstract|class|enum|interface)|\\b(implements|extends))\n                                \\s+(([a-z]+.)*[A-Z]\\w*)'
      }
    ]
  'comments':
    'patterns': [
      {
        'captures':
          '0':
            'name': 'punctuation.definition.comment.haxe'
        'match': '/\\*\\*/'
        'name': 'comment.block.empty.haxe'
      }
      {
        'include': 'text.html.javadoc'
      }
      {
        'include': '#comments-inline'
      }
    ]
  'comments-inline':
    'patterns': [
      {
        'begin': '/\\*'
        'captures':
          '0':
            'name': 'punctuation.definition.comment.haxe'
        'end': '\\*/'
        'name': 'comment.block.haxe'
      }
      {
        'captures':
          '1':
            'name': 'comment.line.double-slash.haxe'
          '2':
            'name': 'punctuation.definition.comment.haxe'
        'match': '\\s*((//).*$\\n?)'
      }
    ]
  'constants':
    'patterns': [
      {
        'match': '\\b(true|false|null)\\b'
        'name': 'constant.language.haxe'
      }
      {
        'match': '\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b'
        'name': 'constant.numeric.haxe'
      }
    ]
  'constructor':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'keyword.other.haxe'
          '2':
            'name': 'storage.type.class.haxe'
        'match': '\\b(new)\\s+(([a-z]+\\.)*[A-Z][\\w\\.\\<\\>]*)'
      }
    ]
  'field-completions':
    'patterns': [
      {
        'begin': '\\.|(?<!if|while|return|for)\\s*\\(\\b'
        'end': '\\s|\\n|;'
        'name': 'meta.scope.field-completions.haxe'
        'patterns': [
          {
            'include': '#constants'
          }
          {
            'include': '#strings'
          }
          {
            'include': '#constructor'
          }
          {
            'include': '#keywords'
          }
        ]
      }
    ]
  'function-definition':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'keyword.other.haxe'
          '2':
            'name': 'entity.name.function.haxe'
        'match': '\\b(function)\\s+([_A-Za-z]\\w*)[<\\w>,]*\\s*\\('
      }
    ]
  'keywords':
    'patterns': [
      {
        'match': '\\b(try|catch|throw)\\b'
        'name': 'keyword.control.catch-exception.haxe'
      }
      {
        'match': '\\w+\\s*\\?\\s*\\w+\\s*:'
        'name': 'keyword.control.ternary-if.haxe'
      }
      {
        'captures':
          '1':
            'name': 'keyword.control.haxe.flow-control.2'
        'match': '\\b(if|return|while|for)\\b\\s*\\('
      }
      {
        'match': '\\b(return|break|case|continue|default|do|while|for|switch|if|else)\\b'
        'name': 'keyword.control.haxe.flow-control.2'
      }
      {
        'match': '(==|!=|<=|>=|<>|<|>)'
        'name': 'keyword.operator.comparison.haxe'
      }
      {
        'match': '(=)'
        'name': 'keyword.operator.assignment.haxe'
      }
      {
        'match': '(\\.\\.\\.)'
        'name': 'keyword.control.directive.haxe'
      }
      {
        'match': '(\\-\\-|\\+\\+)'
        'name': 'keyword.operator.increment-decrement.haxe'
      }
      {
        'match': '(\\-|\\+|\\*|\\/|%)'
        'name': 'keyword.operator.arithmetic.haxe'
      }
      {
        'match': '(!|&&|\\|\\|)'
        'name': 'keyword.operator.logical.haxe'
      }
      {
        'match': '\\b(cast|untyped)\\b'
        'name': 'keyword.other.untyped.haxe'
      }
      {
        'match': '\\btrace\\b'
        'name': 'keyword.other.trace.haxe'
      }
      {
        'captures':
          '1':
            'name': 'keyword.control.directive.conditional.haxe'
        'match': '((\\s)*#if\\s+([\\!\\w]+|(\\([^\\)]*\\))))'
      }
      {
        'match': '(\\s)*(#end|#else|#elseif)\\b'
        'name': 'keyword.control.directive.conditional.haxe'
      }
      {
        'match': ';'
        'name': 'punctuation.terminator.haxe'
      }
      {
        'match': '\\b(this|super)\\b'
        'name': 'variable.language.haxe'
      }
      {
        'match': '\\b(var|new)\\b'
        'name': 'keyword.other.variable.haxe'
      }
      {
        'match': '\\b__(init|instanceof|string_rec)\\b'
        'name': 'support.variable.magic.haxe'
      }
      {
        'match': '\\bprototype\\b'
        'name': 'support.variable.magic.haxe'
      }
      {
        'match': '\\b__(init|name|ename|super|unprotect|constructs|class|enum)__\\b'
        'name': 'support.variable.magic.haxe'
      }
      {
        'include': '#storage'
      }
      {
        'captures':
          '1':
            'name': 'entity.name.type.package.haxe'
          '2':
            'name': 'entity.name.type.class.haxe'
        'match':  '(\\b(([a-z][a-zA-Z0-9]*\\.)*)([A-Z]\\w*|\\*))'
      }
    ]
  'regex':
    'patterns': [
      {
        'captures': {}
        'match': '~/([^/]+)/'
      }
    ]
  'storage':
    'patterns': [
      {
        'match': '((@:)(abi|abstract|access|allow|analyzer|annotation|arrayAccess|autoBuild|bind|bitmap|build|buildXml|callable|classCode|commutative|compilerGenerated|coreApi|coreType|cppFileCode|cppNamespaceCode|dce|debug|decl|defParam|delegate|depend|deprecated|event|expose|extern|fakeEnum|file|final|font|forward|from|functionCode|functionTailCode|generic|genericBuild|getter|hack|headerClassCode|headerCode|headerNamespaceCode:|hxGen|ifFeature|include|initPackage|internal|isVar|javaCanonical|jsRequire|keep|keepInit|keepSub|macro|mergeBlock|meta|multiType|native|nativeChildren|nativeGen|nativeProperty|noCompletion|noDebug|noDoc|noImportGlobal|noPrivateAccess|noStack|noUsing|nonVirtual|notNull|ns|op|optional|overload|privateAccess|property|protected|public|publicFields|pythonImport|readOnly|remove|require|rtti|runtime|runtimeValue|setter|sound|sourceFile|strict|struct|structAccess|suppressWarnings|throws|to|transient|unbound|unifyMinDynamic|unreflective|unsafe|usage|value|void|volatile)\\b)'
        'name': 'storage.modifier.macro.haxe'
      }
      {
        'match': '\\b(public|private|static|dynamic|inline|extern|typedef|override|macro)\\b'
        'name': 'storage.modifier.haxe'
      }
      {
        'match': '\\bpackage\\b'
        'name': 'storage.type.package.haxe'
      }
      {
        'match': '\\b(import|using)\\b'
        'name': 'storage.type.import.haxe'
      }
    ]
  'strings':
    'patterns': [
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.haxe'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.haxe'
        'name': 'string.quoted.double.haxe'
        'patterns': [
          {
            'match': '\\\\.'
            'name': 'constant.character.escape.haxe'
          }
        ]
      }
      {
        'begin': '\''
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.haxe'
        'end': '\''
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.haxe'
        'name': 'string.quoted.single.haxe'
        'patterns': [
          {
            'match': '\\\\.'
            'name': 'constant.character.escape.haxe'
          }
        ]
      }
    ]
